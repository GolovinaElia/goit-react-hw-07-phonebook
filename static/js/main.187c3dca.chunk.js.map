{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Loader/Loader.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactOperations","fetchContacts","dispatch","a","get","data","addContacts","name","number","contact","post","deleteContact","id","delete","contactsAll","state","contacts","items","getFilter","filter","contactsSelectors","isLoadingContacts","loading","getVisibleContact","createSelector","normalizedFilter","toLowerCase","includes","createReducer","_","payload","error","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","App","type","color","height","width","timeout","Component","ContactForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","uuidv4","find","onSubmit","reset","this","className","style","container","containerForm","containerLabel","input","autoComplete","pattern","title","required","onChange","button","connect","contactsOperations","onDeleteContact","contactsList","map","contactsItem","contactsForm","contactsName","buttonContacts","onClick","target","filterLabel","filterInput","phonebook","ContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.187c3dca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__2xD24\",\"buttonContacts\":\"ContactList_buttonContacts__1LRD5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__wkbGo\",\"filterInput\":\"Filter_filterInput__2vugA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"App_phonebook__3yltH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1m0KK\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = ' http://localhost:3000';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContacts =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n  };\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`./contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\nconst contactOperations = { fetchContacts, addContacts, deleteContact };\r\nexport default contactOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst contactsAll = state => state.contacts.items;\r\n\r\nconst isLoadingContacts = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContact = createSelector(\r\n  [contactsAll, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst contactsSelectors = {\r\n  contactsAll,\r\n  isLoadingContacts,\r\n  getFilter,\r\n  getVisibleContact,\r\n};\r\n\r\nexport default contactsSelectors;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: () => alert('Something went wrong, please try again!'),\r\n  [addContactError]: () => alert('Something went wrong, please try again!'),\r\n  [deleteContactError]: () => alert('Something went wrong, please try again!'),\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './contacts';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Loader\r\n        type=\"ThreeDots\"\r\n        color=\"#00BFFF\"\r\n        height={80}\r\n        width={80}\r\n        timeout={3000}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport style from './ContactForm.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport Loader from '../Loader/Loader';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contactsAll } = this.props;\r\n    const contact = { id: uuidv4(), name: name, number: number };\r\n    const inputName = contactsAll.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (inputName) {\r\n      alert(`${name} is already in contacts`);\r\n    } else {\r\n      this.props.onSubmit(contact);\r\n    }\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={style.container}>\r\n        <form className={style.containerForm} onSubmit={this.handleSubmit}>\r\n          <label className={style.containerLabel}>\r\n            Name\r\n            <input\r\n              className={style.input}\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label className={style.containerLabel}>\r\n            Number\r\n            <input\r\n              className={style.input}\r\n              type=\"tel\"\r\n              autoComplete=\"off\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          {this.props.isLoadingContacts && <Loader />}\r\n          <button className={style.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsAll: contactsSelectors.contactsAll(state),\r\n  isLoadingContacts: contactsSelectors.isLoadingContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(contactsOperations.addContacts({ name, number })),\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import style from './ContactList.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <div className={style.contacts}>\r\n    <ul className={style.contactsList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={uuidv4()} className={style.contactsItem}>\r\n          <p className={style.contactsForm}>\r\n            <span className={style.contactsName}>{name}</span>: {number}\r\n            <button\r\n              className={style.buttonContacts}\r\n              type=\"button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContact(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import style from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className={style.filter}>\r\n    <label className={style.filterLabel}>\r\n      Find contact by name\r\n      <input\r\n        className={style.filterInput}\r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n        name=\"name\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport style from './App.module.css';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nconst App = () => (\r\n  <div className={style.phonebook}>\r\n    <h1>Phonebook</h1>\r\n    <ContactForm />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n    <ContactList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate\r\n        loading={<h1>Loading...</h1>}\r\n        persistor={storePersistor.persistor}\r\n      > */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}